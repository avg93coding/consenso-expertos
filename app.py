# B√°sicos y manejo de datos
import streamlit as st
import pandas as pd
import numpy as np
import uuid
import io
import hashlib
import datetime
import base64
import copy
import os
from io import BytesIO
import requests

# Visualizaci√≥n y gr√°ficos
import plotly.express as px
import qrcode

# Estad√≠sticas
from scipy import stats

# Auto-refresh (solo usado en dashboard)
from streamlit_autorefresh import st_autorefresh

# Manipulaci√≥n de documentos Word (optimizado)
from docx import Document
from docx.shared import Cm  # Solo este se usa realmente
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
from docx.enum.text import WD_ALIGN_PARAGRAPH

# 1) set_page_config debe ir primero
st.set_page_config(
    page_title="ODDS Epidemiology ‚Äì Dashboard Consenso de expertos",
    page_icon="https://www.oddsepidemiology.com/favicon.ico",
    layout="wide",
    initial_sidebar_state="collapsed"
)

def inject_css():
    css = """
    <style>
      /* Mantener estos selectores principales */
      .stApp { background-color:#F7F7F7 !important; color:#333333; font-family:'Segoe UI', Tahoma, Verdana, sans-serif; }
      .app-header { background-color:#662D91; padding:1.5rem; border-radius:0 0 10px 10px; text-align:center; color:white; margin-bottom:20px; }
      
      /* Optimizar estas clases */
      .metric-card {
        width:140px; 
        padding:12px; 
        margin-bottom:10px; 
        background: linear-gradient(to bottom right, #662D91, #F1592A); 
        color:white; 
        border-radius:8px; 
        box-sizing:border-box; 
        white-space:normal !important; 
        word-wrap:break-word !important; 
      }
      .stButton>button { 
        background-color:#662D91; 
        color:white; 
        border:none; 
        padding:0.5rem 1rem; 
        border-radius:5px; 
        transition: background-color 0.3s ease; /* Agregado para mejor hover */
      }
      .stButton>button:hover { background-color:#F1592A; }
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)

inject_css()

def odds_header():
    st.markdown("""
    <div class="app-header">
      <div style="font-size:2rem; font-weight:bold; letter-spacing:1px; 
           padding-bottom:5px; border-bottom:2px solid #F1592A; display:inline-block;">
        ODDS EPIDEMIOLOGY
      </div>
      <div style="margin-top:10px; font-size:1.1rem;">
        Sistema de Votaci√≥n
      </div>
    </div>
    """, unsafe_allow_html=True)

DOMINIOS_GRADE = {
    "prioridad_problema": [
        "No", "Probablemente no", "Probablemente s√≠", "S√≠", "Var√≠a", "No sabemos"
    ],
    "efectos_deseables": [
        "No importante", "Peque√±a", "Moderada", "Grande", "Var√≠a", "No se sabe"
    ],
    "efectos_indeseables": [
        "No importante", "Peque√±a", "Moderada", "Grande", "Var√≠a", "No se sabe"
    ],
    "certeza_evidencia": [
        "Muy baja", "Baja", "Moderada", "Alta", "No hay estudios incluidos"
    ],
    "balance_efectos": [
        "Favorece al comparador",
        "Probablemente favorece al comparador",
        "No favorece ni al comparador ni a la intervenci√≥n",
        "Probablemente favorece a la intervenci√≥n",
        "Favorece la intervenci√≥n",
        "Es variable",
        "No es posible saber"
    ],
    "recursos": [
        "Costos altos/recursos",
        "Costos moderados/recursos",
        "Costos o ahorro m√≠nimo/recursos insignificantes",
        "Ahorro moderado",
        "Gran ahorro",
        "Variable",
        "No se sabe"
    ],
    "aceptabilidad": [
        "No", "Probablemente no", "Probablemente s√≠", "S√≠", "Var√≠a", "No se sabe"
    ],
    "factibilidad": [
        "No", "Probablemente no", "Probablemente s√≠", "S√≠", "Var√≠a", "No se sabe"
    ],
    "equidad": [
        "Reducido", "Probablemente reducido", "Probablemente no impacta",
        "Probablemente incrementa", "Incrementa", "Var√≠a", "No se sabe"
    ],
}

PREGUNTAS_GRADE = {
    "prioridad_problema":   "¬øConstituye el problema una prioridad?",
    "efectos_deseables":    "¬øCu√°l es la magnitud de los efectos deseados que se prev√©n?",
    "efectos_indeseables":  "¬øCu√°l es la magnitud de los efectos no deseados que se prev√©n?",
    "certeza_evidencia":    "¬øCu√°l es la certeza global de la evidencia de los efectos?",
    "balance_efectos":      "¬øQu√© balance entre efectos deseables y no deseables favorece?",
    "recursos":             "¬øCu√°l es la magnitud de los recursos necesarios (costos)?",
    "aceptabilidad":        "¬øEs aceptable la intervenci√≥n para los grupos clave?",
    "factibilidad":         "¬øEs factible la implementaci√≥n de la intervenci√≥n?",
    "equidad":              "¬øCu√°l ser√≠a el impacto sobre la equidad en salud?",
}
# ------------------------------------------------------------


def shade_cell(cell, fill_hex: str):
    """
    Aplica un fondo de color (hex sin ‚Äò#‚Äô) a una celda de python-docx.
    """
    tc = cell._tc
    tcPr = tc.get_or_add_tcPr()
    shd = OxmlElement('w:shd')
    shd.set(qn('w:val'), 'clear')
    shd.set(qn('w:fill'), fill_hex)
    tcPr.append(shd)


# Define tus colores corporativos al inicio del fichero
PRIMARY = "#662D91"   # Morado ODDS
SECONDARY = "#F1592A" # Naranja ODDS (opcional)


def to_excel(code: str) -> io.BytesIO:
    if code not in store:
        return io.BytesIO()

    s = store[code]

    # ‚Äî‚Äî A. Sesi√≥n est√°ndar ‚Äî‚Äî
    if s.get("tipo", "STD") == "STD":
        df = pd.DataFrame({
            "ID an√≥nimo":    s["ids"],
            "Nombre real":   s["names"],
            "Recomendaci√≥n": [s["desc"]] * len(s["ids"]),
            "Ronda":         [s["round"]] * len(s["ids"]),
            "Voto":          s["votes"],
            "Comentario":    s["comments"],
            "Fecha":         [s["created_at"]] * len(s["ids"])
        })

    # ‚Äî‚Äî B. Paquete GRADE (filas=participantes, columnas=dominios) ‚Äî‚Äî
    elif s.get("tipo") == "GRADE_PKG":
        dominios = list(s["dominios"].keys())
        # supongo que cada dominio tuvo el mismo # de env√≠os
        primero = s["dominios"][dominios[0]]
        n_envios = len(primero["votes"])

        filas = []
        for i in range(n_envios):
            fila = {
                "ID":    primero["ids"][i],
                "Nombre":primero["names"][i],
                "Fecha": s["created_at"]
            }
            # por cada dominio metemos voto + comentario
            for d in dominios:
                meta = s["dominios"][d]
                fila[d] = meta["votes"][i]
                fila[f"{d}_comentario"] = meta["comments"][i]
            filas.append(fila)

        df = pd.DataFrame(filas)

    # ‚Äî‚Äî Guardar en buffer y devolver ‚Äî‚Äî
    buf = io.BytesIO()
    df.to_excel(buf, index=False)
    buf.seek(0)
    return buf



def create_report(code: str) -> str:
    """
    Genera un reporte de texto plano con m√©tricas y comentarios de la sesi√≥n actual
    (incluye tambi√©n el historial de rondas anteriores si lo hay).
    """
    if code not in store:
        return "Sesi√≥n inv√°lida"
    s = store[code]
    pct = consensus_pct(s["votes"]) * 100
    med, lo, hi = median_ci(s["votes"])
    # Cabecera
    lines = [
        f"REPORTE DE CONSENSO - Sesi√≥n {code}",
        f"Fecha de generaci√≥n: {datetime.datetime.now():%Y-%m-%d %H:%M:%S}",
        "",
        f"Recomendaci√≥n: {s['desc']}",
        f"Ronda actual: {s['round']}",
        f"Votos totales: {len(s['votes'])}",
        f"% Consenso: {pct:.1f}%",
        f"Mediana (IC95%): {med:.1f} [{lo:.1f}, {hi:.1f}]",
        "",
        "Comentarios:",
    ]
    # Comentarios de la ronda actual
    for pid, name, vote, com in zip(s["ids"], s["names"], s["votes"], s["comments"]):
        if com:
            lines.append(f"- {name} (ID {pid}): ‚Äú{com}‚Äù")
    # Historial de rondas anteriores
    if code in history and history[code]:
        lines.append("\nHistorial de rondas anteriores:")
        for past in history[code]:
            ppct = consensus_pct(past["votes"]) * 100
            lines.append(
                f"  * Ronda {past['round']} [{past['created_at']}]: "
                f"%Consenso={ppct:.1f}%, Mediana={median_ci(past['votes'])[0]:.1f}"
            )
    return "\n".join(lines)


# Crear carpeta para guardar datos si no existe
DATA_DIR = "registro_data"
os.makedirs(DATA_DIR, exist_ok=True)

# Funci√≥n: cargar registros desde CSV
def cargar_registros(nombre):
    path = os.path.join(DATA_DIR, f"{nombre}.csv")
    if os.path.exists(path):
        return pd.read_csv(path).to_dict("records")
    return []

# Funci√≥n: guardar registros en CSV
def guardar_registros(nombre, registros):
    df = pd.DataFrame(registros)
    df.to_csv(os.path.join(DATA_DIR, f"{nombre}.csv"), index=False)

# Inicializar en session_state
if "registro_conflicto" not in st.session_state:
    st.session_state["registro_conflicto"] = cargar_registros("registro_conflicto")

if "registro_confidencialidad" not in st.session_state:
    st.session_state["registro_confidencialidad"] = cargar_registros("registro_confidencialidad")

# L√≥gica si la URL tiene ?registro=...
params = st.query_params
if "registro" in params:
    tipo = params.get("registro")
    st.set_page_config(page_title="Registro de Expertos", layout="centered")

    if tipo == "conflicto":
        st.title("üîê Registro: Declaraci√≥n de Conflictos de Inter√©s")
        with st.form("form_conflicto_externo"):
            nombre = st.text_input("Nombre completo")
            institucion = st.text_input("Instituci√≥n o afiliaci√≥n")
            cargo = st.text_input("Cargo profesional")
            participa_en = st.multiselect("¬øParticipa actualmente en alguno de los siguientes?", [
                "Industria farmac√©utica", "Investigaci√≥n patrocinada", "Consultor√≠a m√©dica", "Autor√≠a de gu√≠as cl√≠nicas", "Otro", "Ninguno"])
            tiene_conflicto = st.radio("¬øTiene un posible conflicto que pueda influir en esta recomendaci√≥n?", ["No", "S√≠"])
            detalle_conflicto = st.text_area("Describa brevemente su conflicto") if tiene_conflicto == "S√≠" else ""
            confirma = st.checkbox("Declaro que la informaci√≥n es ver√≠dica y completa", value=False)
            submit = st.form_submit_button("Enviar")

            if submit:
                if not nombre or not confirma:
                    st.warning("Debe completar todos los campos obligatorios y aceptar la declaraci√≥n.")
                else:
                    nuevo = {
                        "id": str(uuid.uuid4())[:8],
                        "nombre": nombre,
                        "institucion": institucion,
                        "cargo": cargo,
                        "participa_en": "; ".join(participa_en),
                        "conflicto": tiene_conflicto,
                        "detalle": detalle_conflicto,
                        "fecha": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    }
                    st.session_state["registro_conflicto"].append(nuevo)
                    guardar_registros("registro_conflicto", st.session_state["registro_conflicto"])
                    st.success("‚úÖ Registro enviado correctamente. Puede cerrar esta ventana.")
        st.stop()

    elif tipo == "confidencialidad":
        st.title("üìÑ Registro: Acuerdo de Confidencialidad")
        with st.form("form_confidencialidad_externo"):
            nombre = st.text_input("Nombre completo")
            acepta1 = st.checkbox("Me comprometo a mantener la confidencialidad del contenido discutido y votado.")
            acepta2 = st.checkbox("Entiendo que no tengo derechos de autor sobre los productos resultantes del consenso.")
            submit = st.form_submit_button("Aceptar y registrar")

            if submit:
                if not nombre or not (acepta1 and acepta2):
                    st.warning("Debe completar el formulario y aceptar todas las condiciones.")
                else:
                    nuevo = {
                        "id": str(uuid.uuid4())[:8],
                        "nombre": nombre,
                        "fecha": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        "acepta": True
                    }
                    st.session_state["registro_confidencialidad"].append(nuevo)
                    guardar_registros("registro_confidencialidad", st.session_state["registro_confidencialidad"])
                    st.success("‚úÖ Registro enviado correctamente. Puede cerrar esta ventana.")
        st.stop()




# 2) Almacenamiento persistente utilizando session_state
# Esto asegura que las sesiones persistan incluso cuando Streamlit se reinicia
# Diccionario compartido en todo el servidor
@st.cache_resource
def get_store():
    return {}

store = get_store()
# Historia en memoria:
history = {}


# 3) Utilidades
def make_session(desc: str, scale: str) -> str:
    code = uuid.uuid4().hex[:6].upper()
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    store[code] = {
        "desc": desc,
        "scale": scale,
        "votes": [],
        "comments": [],
        "ids": [],
        "names": [],
        "created_at": timestamp,
        "round": 1
    }
    history[code] = []  # inicializamos el historial
    return code


def hash_id(name: str) -> str:
    return hashlib.sha256(name.encode()).hexdigest()[:8]

# Funci√≥n para validar si un correo est√° autorizado para votar en una sesi√≥n privada
def correo_autorizado(correo: str, code: str) -> bool:
    if code in store:
        sesion = store[code]
        if sesion.get("privado", False):
            lista = sesion.get("correos_autorizados", [])
            return correo.lower().strip() in [c.lower().strip() for c in lista]
    return True

# Funci√≥n para validar si un correo est√° autorizado para votar en una sesi√≥n privada
def correo_autorizado(correo: str, code: str) -> bool:
    if code in store:
        sesion = store[code]
        if sesion.get("privado", False):
            lista = sesion.get("correos_autorizados", [])
            return correo and correo.lower().strip() in [c.lower().strip() for c in lista]
    return True  # Si la sesi√≥n no es privada, siempre es autorizado

# Funci√≥n para registrar el voto
def record_vote(code: str, vote, comment: str, name: str, correo: str = None):
    if code not in store:
        return None

    if not correo_autorizado(correo, code):
        return None

    s = store[code]
    pid = hashlib.sha256(name.encode()).hexdigest()[:8]

    # Evitar votos duplicados por nombre
    if name and name in s["names"]:
        idx = s["names"].index(name)
        s["votes"][idx] = vote
        s["comments"][idx] = comment
        return pid

    s["votes"].append(vote)
    s["comments"].append(comment)
    s["ids"].append(pid)
    s["names"].append(name)
    return pid

def consensus_pct(votes):
    int_votes = [v for v in votes if isinstance(v, (int, float))]
    if not int_votes:
        return 0.0
    return sum(1 for v in int_votes if v >= 7) / len(int_votes)

def median_ci(votes):
    if not votes:
        return 0, 0, 0
    arr = np.array([v for v in votes if isinstance(v, (int, float))])
    if len(arr) == 0:
        return 0, 0, 0
    med = np.median(arr)
    res = stats.bootstrap((arr,), np.median, confidence_level=0.95, n_resamples=1000)
    return med, res.confidence_interval.low, res.confidence_interval.high

def get_base_url():
    # URL espec√≠fica para aplicaci√≥n en Streamlit Cloud
    return "https://consenso-expertos-sfpqj688ihbl7m6tgrdmwb.streamlit.app"

def create_qr_code_url(code: str):
    base_url = get_base_url()
    # Elimina slashes finales para evitar doble slash
    base_url = base_url.rstrip('/')
    # Construye URL correctamente
    return f"{base_url}/?session={code}"

def make_qr(code: str) -> io.BytesIO:
    url = create_qr_code_url(code)
    
    buf = io.BytesIO()
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_H,  # Nivel m√°s alto de correcci√≥n de errores
        box_size=10,
        border=4,
    )
    qr.add_data(url)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    img.save(buf, format="PNG")
    buf.seek(0)
    return buf

def get_qr_code_image_html(code):
    buf = make_qr(code)
    img_str = base64.b64encode(buf.getvalue()).decode("utf-8")
    url = create_qr_code_url(code)
    html = f"""
    <div style="text-align: center; margin-bottom: 20px;">
        <img src="data:image/png;base64,{img_str}" width="200">
        <p style="margin-top: 10px; font-size: 0.8rem;">URL: <a href="{url}" target="_blank">{url}</a></p>
    </div>
    """
    return html



def crear_reporte_consolidado_recomendaciones(store: dict, history: dict) -> io.BytesIO:
    """
    Genera un .docx con, para cada recomendaci√≥n:
      - Logo alineado a la derecha en la cabecera
      - Encabezado con el c√≥digo
      - Descripci√≥n
      - Fecha de creaci√≥n
      - Tabla de m√©tricas (Total votos, % Consenso, Mediana, IC95%)
      - Estado de consenso
    """
    doc = Document()


    # 1. Descargar el logo
    logo_url = (
        "https://static.wixstatic.com/media/89a9c2_ddc57311fc734357b9ea2b699e107ae2"
        "~mv2.png/v1/fill/w_90,h_54,al_c,q_85,usm_0.66_1.00_0.01/"
        "Logo%20versi√≥n%20principal.png"
    )
    resp = requests.get(logo_url)
    if resp.status_code == 200:
        img_stream = BytesIO(resp.content)
        # 2. Obtener (o crear) el p√°rrafo del encabezado
        header = doc.sections[0].header
        if header.paragraphs:
            header_para = header.paragraphs[0]
        else:
            header_para = header.add_paragraph()
        # 3. Insertar la imagen y alinearla a la derecha
        run = header_para.add_run()
        run.add_picture(img_stream, width=Cm(4))
        header_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT

    # 4. Ajustar m√°rgenes A4
    for sec in doc.sections:
        sec.page_height = Cm(29.7)
        sec.page_width  = Cm(21.0)
        sec.left_margin = Cm(2.5)
        sec.right_margin = Cm(2.5)
        sec.top_margin = Cm(2.5)
        sec.bottom_margin = Cm(2.5)

    # 5. Iterar cada recomendaci√≥n
    for code, rec in store.items():
        # 5.1 Encabezado de recomendaci√≥n
        h = doc.add_heading(level=1)
        h.add_run(f"Recomendaci√≥n {code}").bold = True
        h.alignment = WD_ALIGN_PARAGRAPH.LEFT

        # 5.2 Descripci√≥n
        doc.add_paragraph().add_run("Descripci√≥n: ").bold = True
        doc.add_paragraph(rec["desc"])

        # 5.3 Fecha de creaci√≥n
        doc.add_paragraph().add_run("Fecha de creaci√≥n: ").bold = True
        doc.add_paragraph(rec["created_at"])

        # 5.4 Tabla de m√©tricas
        votos = rec["votes"]
        pct = consensus_pct(votos) * 100
        med, lo, hi = median_ci(votos)

        tbl = doc.add_table(rows=1, cols=4, style="Table Grid")
        hdr_cells = tbl.rows[0].cells
        titles = ["Total votos", "% Consenso", "Mediana", "IC95%"]
        for idx, title in enumerate(titles):
            cell = hdr_cells[idx]
            cell.text = ""
            p = cell.paragraphs[0]
            run = p.add_run(title)
            run.bold = True
            p.alignment = WD_ALIGN_PARAGRAPH.CENTER

        values = [str(len(votos)), f"{pct:.1f}%", f"{med:.1f}", f"[{lo:.1f}, {hi:.1f}]"]
        row_cells = tbl.add_row().cells
        for idx, val in enumerate(values):
            cell = row_cells[idx]
            cell.text = val
            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

        doc.add_paragraph()

        # 5.5 Estado de consenso
        total = len(votos)
        if pct >= 80 and 7 <= med <= 9 and 7 <= lo <= 9 and 7 <= hi <= 9:
            estado = "‚úÖ CONSENSO ALCANZADO (por mediana + IC95%)."
        elif pct >= 80:
            estado = "‚úÖ CONSENSO ALCANZADO (por porcentaje)."
        elif pct <= 20 and 1 <= med <= 3 and 1 <= lo <= 3 and 1 <= hi <= 3:
            estado = "‚ùå NO APROBADO (por mediana + IC95%)."
        elif sum(1 for v in votos if isinstance(v, (int, float)) and v <= 3) >= 0.8 * total:
            estado = "‚ùå NO APROBADO (por porcentaje)."
        else:
            estado = "‚ö†Ô∏è NO SE ALCANZ√ì CONSENSO."

        doc.add_paragraph().add_run("Estado de consenso: ").bold = True
        doc.add_paragraph(estado)

        doc.add_page_break()

    # 6. Guardar y devolver buffer
    buffer = io.BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
#  Integraci√≥n en Streamlit
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
def integrar_reporte_todas_recomendaciones():
    st.subheader(" Descargar Reporte Consolidado de Recomendaciones")

    if not store:
        st.info("No hay recomendaciones registradas a√∫n.")
        return

    if st.button("‚¨áÔ∏è Generar y Descargar .docx"):
        buf = crear_reporte_consolidado_recomendaciones(store, history)
        nombre = f"reporte_recomendaciones_{datetime.datetime.now():%Y%m%d}.docx"
        st.download_button(
            label="Descargar Documento",
            data=buf,
            file_name=nombre,
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )



# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 5)  P√°gina de votaci√≥n (se adapta al tipo de sesi√≥n)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 5) P√°gina de votaci√≥n (adaptable al tipo de sesi√≥n)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
params = st.query_params
if "session" in params:
    raw  = params.get("session")
    code = raw[0] if isinstance(raw, list) else raw
    code = str(code).strip().upper()

    odds_header()
    st.markdown('<div class="hide-sidebar">', unsafe_allow_html=True)

    s = store.get(code)
    if not s:
        st.error(f"Sesi√≥n inv√°lida: {code}")
        st.stop()
    tipo = s.get("tipo", "STD")

    st.subheader(f"Panel de votaci√≥n ‚Äî Sesi√≥n {code}")

    # Pedimos el nombre antes de todo
    name = st.text_input("Nombre del participante:")
    if not name:
        st.warning("Ingrese su nombre para continuar.")
        st.stop()

    # Evita doble voto
    if (tipo == "STD" and name in s["names"]) \
    or (tipo == "GRADE_PKG" and name in s["dominios"]["prioridad_problema"]["names"]):
        st.success("‚úÖ Ya registr√≥ su participaci√≥n.")
        st.stop()

    # ‚Äî‚Äî‚Äî SESI√ìN EST√ÅNDAR ‚Äî‚Äî‚Äî
    if tipo == "STD":
        st.markdown("### Recomendaci√≥n a evaluar")
        st.markdown(f"**{s['desc']}**")
        if s["scale"].startswith("Likert"):
            st.markdown("1‚Äë3¬†Desacuerdo ‚Ä¢ 4‚Äë6¬†Neutral ‚Ä¢ 7‚Äë9¬†Acuerdo")
            vote = st.slider("Su voto:", 1, 9, 5)
        else:
            vote = st.radio("Su voto:", ["S√≠", "No"])
        comment = st.text_area("Comentario (opcional):")

        if st.button("Enviar voto"):
            pid = record_vote(code, vote, comment, name)
            if pid:
                st.balloons()
                st.success(f"üéâ Gracias. ID de voto: `{pid}`")
            else:
                st.error("No se pudo registrar el voto.")
        st.stop()

    # ‚Äî‚Äî‚Äî PAQUETE GRADE ‚Äî‚Äî‚Äî
    elif tipo == "GRADE_PKG":
        st.write(f"### Evaluaci√≥n GRADE (paquete de {len(s['recs'])} recomendaciones)")
        st.markdown("**Recomendaciones incluidas:**")
        for rc in s["recs"]:
            st.markdown(f"- **{rc}** ‚Äî {store[rc]['desc']}")

        votos, comentarios = {}, {}
        for dom in PREGUNTAS_GRADE:
            st.markdown(f"**{PREGUNTAS_GRADE[dom]}**")
            votos[dom] = st.radio(
                "",
                DOMINIOS_GRADE[dom],
                key=f"{code}-vote-{dom}"
            )
            comentarios[dom] = st.text_area(
                "Comentario (opcional):",
                key=f"{code}-com-{dom}",
                height=60
            )

        if st.button("Enviar votos GRADE"):
            pid = hashlib.sha256(name.encode()).hexdigest()[:8]
            for dom in PREGUNTAS_GRADE:
                meta = s["dominios"][dom]
                meta["ids"].append(pid)
                meta["names"].append(name)
                meta["votes"].append(votos[dom])
                meta["comments"].append(comentarios[dom])
            st.balloons()
            st.success(f"üéâ Votos registrados. ID: `{pid}`")
            # no st.stop() para que salga el bot√≥n de descarga

        buf = to_excel(code)
        st.download_button(
            "‚¨áÔ∏è Descargar Excel (dominios¬†√ó¬†participantes)",
            data=buf,
            file_name=f"GRADE_{code}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
        st.stop()


# 6) Panel de administraci√≥n
odds_header()
# Logo en la barra lateral
logo_url = "https://static.wixstatic.com/media/89a9c2_ddc57311fc734357b9ea2b699e107ae2~mv2.png/v1/fill/w_90,h_54,al_c,q_85,usm_0.66_1.00_0.01/Logo%20versi%C3%B3n%20principal.png"
st.sidebar.image(logo_url, width=80)

st.sidebar.title("Panel de Control")
st.sidebar.markdown("### ODDS Epidemiology")
menu = st.sidebar.selectbox("Navegaci√≥n", ["Inicio", "Crear Recomendaci√≥n", "Dashboard", "Crear Paquete GRADE", "Reporte Consolidado"])

if menu == "Inicio":
    st.markdown("## Bienvenido al Sistema de votaci√≥n para Consenso de expertos de ODDS Epidemiology")
    
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown("""
    
    
    Utilice el panel de navegaci√≥n para comenzar.
    """)
    st.markdown("</div>", unsafe_allow_html=True)
    
    

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  BLOQUE DEL PANEL: "Crear Recomendaci√≥n"
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
elif menu == "Crear Recomendaci√≥n":
    st.subheader("Crear Nueva Recomendaci√≥n")
    
    # --- Secci√≥n 1: Carga desde Excel ---
    with st.expander("üì§ Cargar desde Excel", expanded=False):
        if "uploader_key" not in st.session_state:
            st.session_state.uploader_key = 0
            
        uploaded_file = st.file_uploader(
            "Subir archivo Excel (columnas 'ronda' y 'recomendacion')",
            type=["xlsx", "xls"],
            key=f"excel_upload_{st.session_state.uploader_key}"
        )
        
        if uploaded_file:
            try:
                df = pd.read_excel(uploaded_file, engine="openpyxl")
                df.columns = df.columns.str.strip().str.lower()
                
                if not {"ronda", "recomendacion"}.issubset(df.columns):
                    st.error("El archivo debe contener las columnas requeridas")
                else:
                    st.session_state.excel_data = df.dropna(subset=["ronda", "recomendacion"])
                    st.success(f"{len(st.session_state.excel_data)} recomendaciones cargadas")
                    
                    if st.button("Limpiar datos cargados"):
                        del st.session_state.excel_data
                        st.session_state.uploader_key += 1
                        st.rerun()
                        
            except Exception as e:
                st.error(f"Error al procesar el archivo: {str(e)}")

    # --- Secci√≥n 2: Formulario de creaci√≥n ---
    with st.form("recommendation_form"):
        # Precargar datos si existen
        if "excel_data" in st.session_state:
            selected = st.selectbox(
                "Seleccionar recomendaci√≥n precargada",
                options=[""] + list(st.session_state.excel_data.itertuples()),
                format_func=lambda x: f"{x.ronda}: {x.recomendacion[:60]}..." if x else ""
            )
            
            if selected:
                default_round = selected.ronda
                default_desc = selected.recomendacion
            else:
                default_round = ""
                default_desc = ""
        else:
            default_round = ""
            default_desc = ""
        
        # Campos del formulario
        round_name = st.text_input("Nombre de la ronda", value=default_round)
        recommendation_text = st.text_area(
            "Texto de la recomendaci√≥n", 
            value=default_desc,
            height=100
        )
        
        col1, col2 = st.columns(2)
        with col1:
            voting_scale = st.selectbox(
                "Escala de votaci√≥n",
                options=["Likert 1-9", "S√≠/No"]
            )
        with col2:
            participants = st.number_input(
                "N√∫mero de participantes",
                min_value=1,
                value=5
            )
        
        is_private = st.checkbox("Sesi√≥n privada (requiere lista de correos)")
        if is_private:
            emails = st.text_area(
                "Correos autorizados (separados por comas o saltos de l√≠nea)",
                placeholder="usuario1@mail.com, usuario2@mail.com\nusuario3@mail.com"
            )
            authorized_emails = [e.strip() for e in emails.replace("\n", ",").split(",") if e.strip()]
        
        if st.form_submit_button("Crear Recomendaci√≥n"):
            if not recommendation_text:
                st.error("El texto de la recomendaci√≥n es obligatorio")
                st.stop()
                
            # Generar ID y timestamp
            session_id = uuid.uuid4().hex[:6].upper()
            created_at = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # Guardar en el store
            store[session_id] = {
                "desc": f"{recommendation_text} ({round_name})" if round_name else recommendation_text,
                "scale": voting_scale,
                "votes": [],
                "comments": [],
                "ids": [],
                "names": [],
                "created_at": created_at,
                "round": 1,
                "is_active": True,
                "n_participantes": participants,
                "privado": is_private,
                "correos_autorizados": authorized_emails if is_private else []
            }
            
            # Mostrar resultados
            st.success("Recomendaci√≥n creada exitosamente")
            
            with st.container():
                st.subheader("Detalles de la sesi√≥n")
                cols = st.columns([1, 2])
                with cols[0]:
                    st.metric("C√≥digo", session_id)
                    st.image(make_qr(session_id), width=150)
                with cols[1]:
                    st.code(f"URL de acceso: {create_qr_code_url(session_id)}")
                    
elif menu == "Dashboard":
    st.subheader("Dashboard en Tiempo Real")
    st_autorefresh(interval=5000, key="dashboard_refresh")

    # 1) Filtrado de sesiones activas con informaci√≥n enriquecida
    active_sessions = {
        k: v for k, v in store.items() 
        if v.get("is_active", True)
    }
    
    if not active_sessions:
        st.info("No hay sesiones activas disponibles")
        st.stop()

    # 2) Selector mejorado con m√©tricas clave
    selected_session = st.selectbox(
        "Seleccionar sesi√≥n:",
        options=list(active_sessions.keys()),
        format_func=lambda k: (
            f"{k} - {active_sessions[k]['desc'][:30]}... | "
            f"Votos: {len(active_sessions[k]['votes'])}/{active_sessions[k]['n_participantes']}"
        )
    )
    
    session_data = active_sessions[selected_session]
    votes = session_data["votes"]
    comments = session_data["comments"]
    participants = session_data["names"]

    # 3) C√°lculo de m√©tricas (con manejo de casos vac√≠os)
    consensus = consensus_pct(votes) * 100 if votes else 0
    median_data = median_ci(votes) if votes else (None, None, None)
    quorum = session_data["n_participantes"] // 2 + 1
    current_votes = len(votes)

    # 4) Layout mejorado con pesta√±as
    tab_main, tab_data, tab_comments = st.tabs(["Resumen", "Datos", "Comentarios"])

    with tab_main:
        # Secci√≥n de estado
        status_col, action_col = st.columns([3, 1])
        
        with status_col:
            st.markdown(f"""
            ### {session_data['desc']}
            **Ronda:** {session_data['round']} | **Creada:** {session_data['created_at']}
            **Participaci√≥n:** {current_votes}/{session_data['n_participantes']} | **Qu√≥rum:** {quorum}
            """)
            
        with action_col:
            if st.button("Finalizar sesi√≥n", type="primary"):
                store[selected_session]["is_active"] = False
                history.setdefault(selected_session, []).append(copy.deepcopy(session_data))
                st.success("Sesi√≥n finalizada")
                st.rerun()
                
            if st.button("Nueva ronda"):
                history.setdefault(selected_session, []).append(copy.deepcopy(session_data))
                st.session_state.edit_session = selected_session
                st.rerun()

        # M√©tricas visuales
        metric_col1, metric_col2, metric_col3 = st.columns(3)
        
        with metric_col1:
            st.metric("Votos registrados", f"{current_votes}/{session_data['n_participantes']}")
            
        with metric_col2:
            st.metric("% Consenso", f"{consensus:.1f}%")
            
        with metric_col3:
            if votes:
                st.metric("Mediana (IC95%)", 
                         f"{median_data[0]:.1f} [{median_data[1]:.1f}, {median_data[2]:.1f}]")

        # Gr√°fico y estado de consenso
        st.markdown("---")
        
        if votes:
            # Histograma mejorado
            fig = px.histogram(
                pd.DataFrame({"Voto": votes}),
                x="Voto",
                nbins=9,
                range_x=[1,9],
                color_discrete_sequence=[PRIMARY],
                labels={"Voto": "Escala de votaci√≥n", "count": "Participantes"}
            )
            fig.update_layout(
                bargap=0.2,
                xaxis=dict(tickmode='linear', dtick=1),
                yaxis_title="N√∫mero de votos",
                margin=dict(t=20),
                height=300
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Estado de consenso
            if current_votes < quorum:
                st.warning(f"Qu√≥rum no alcanzado ({current_votes}/{quorum})")
            elif consensus >= 80 and all(7 <= x <= 9 for x in median_data if x is not None):
                st.success("CONSENSO ALCANZADO (mediana + IC95%)")
            elif consensus >= 80:
                st.success("CONSENSO ALCANZADO (% votos)")
            elif consensus <= 20 and all(1 <= x <= 3 for x in median_data if x is not None):
                st.error("NO APROBADO (mediana + IC95%)")
            else:
                st.info("No se alcanz√≥ consenso")
        else:
            st.info("A√∫n no hay votos registrados")

    with tab_data:
        # Exportaci√≥n de datos
        st.download_button(
            "Descargar Excel completo",
            data=to_excel(selected_session),
            file_name=f"consenso_{selected_session}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
        
        st.download_button(
            "Descargar reporte ejecutivo",
            data=create_report(selected_session),
            file_name=f"reporte_{selected_session}.txt"
        )
        
        if votes:
            st.dataframe(pd.DataFrame({
                "Participante": session_data["names"],
                "ID": session_data["ids"],
                "Voto": votes,
                "Comentario": comments
            }), hide_index=True)

    with tab_comments:
        if comments:
            for name, pid, vote, comment in zip(participants, session_data["ids"], votes, comments):
                if comment:
                    with st.expander(f"{name} (ID: {pid}) - Voto: {vote}"):
                        st.write(comment)
        else:
            st.info("No hay comentarios registrados")
                
elif menu == "Crear Paquete GRADE":
    st.subheader("Creaci√≥n de Paquete GRADE")
    
    # 1) Filtrado avanzado de recomendaciones disponibles
    recomendaciones_disponibles = [
        (codigo, datos) for codigo, datos in store.items()
        if (datos.get("tipo", "STD") == "STD" and                    # Solo sesiones est√°ndar
           not datos.get("is_active", True) and                      # Sesiones finalizadas
           len(datos.get("votes", [])) >= 3 and                      # M√≠nimo 3 votos
           consensus_pct(datos.get("votes", [])) >= 0.5              # Algo de consenso (50%)
    )
    
    if not recomendaciones_disponibles:
        st.warning("""
        No hay recomendaciones elegibles para paquetes GRADE. Requisitos:
        - Sesiones finalizadas
        - M√≠nimo 3 votos registrados
        - Al menos 50% de consenso inicial
        """)
        st.stop()

    # 2) Interfaz de selecci√≥n mejorada
    with st.expander("üìã Recomendaciones disponibles", expanded=True):
        cols = st.columns(2)
        selected_codes = []
        
        for idx, (codigo, datos) in enumerate(recomendaciones_disponibles):
            with cols[idx % 2]:
                if st.checkbox(
                    f"**{codigo}** - {datos['desc'][:50]}...\n"
                    f"Votos: {len(datos['votes'])} | "
                    f"Consenso: {consensus_pct(datos['votes']) * 100:.1f}%",
                    key=f"pkg_{codigo}"
                ):
                    selected_codes.append(codigo)

    if not selected_codes:
        st.stop()

    # 3) Configuraci√≥n del paquete
    with st.form("grade_package_form"):
        st.write("**Configuraci√≥n del paquete**")
        
        col1, col2 = st.columns(2)
        with col1:
            num_expertos = st.number_input(
                "N√∫mero de evaluadores:",
                min_value=3,
                max_value=50,
                value=10,
                help="M√≠nimo 3 expertos para evaluaci√≥n GRADE"
            )
            
        with col2:
            pkg_name = st.text_input(
                "Nombre descriptivo:",
                value=f"Paquete GRADE {datetime.date.today().strftime('%Y-%m-%d')}",
                help="Ej: 'Evaluaci√≥n estrategias prevenci√≥n COVID-19'"
            )
        
        if st.form_submit_button("üõ†Ô∏è Crear Paquete GRADE"):
            # Validaci√≥n final
            if len(selected_codes) < 1:
                st.error("Seleccione al menos una recomendaci√≥n")
                st.stop()
                
            # Generaci√≥n del c√≥digo
            pkg_code = uuid.uuid4().hex[:6].upper()
            
            # Estructura de datos del paquete
            store[pkg_code] = {
                "tipo": "GRADE_PKG",
                "desc": pkg_name,
                "recs": selected_codes,
                "dominios": {
                    dominio: {
                        "ids": [],
                        "names": [],
                        "votes": [],
                        "comments": [],
                        "opciones": DOMINIOS_GRADE[dominio]
                    } for dominio in DOMINIOS_GRADE
                },
                "n_participantes": num_expertos,
                "created_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "is_active": True,
                "metadata": {
                    "recomendaciones_incluidas": selected_codes,
                    "votos_previos": {code: len(store[code]["votes"]) for code in selected_codes}
                }
            }
            
            history[pkg_code] = []
            
            # Generaci√≥n de enlace
            voting_url = create_qr_code_url(pkg_code)
            
            # Visualizaci√≥n de resultados
            st.success(f"Paquete creado con c√≥digo: **{pkg_code}**")
            
            tab1, tab2 = st.tabs(["C√≥digo QR", "Enlace directo"])
            with tab1:
                st.image(make_qr(pkg_code), width=250)
                st.caption("Escanee este c√≥digo para acceder a la evaluaci√≥n")
                
            with tab2:
                st.code(voting_url, language="text")
                st.download_button(
                    "Copiar enlace",
                    data=voting_url,
                    file_name=f"enlace_GRADE_{pkg_code}.txt",
                    mime="text/plain"
                )

elif menu == "Registro Previo":
    st.title("Registro Previo - Panel de Consenso")
    st.markdown("Comparta los siguientes enlaces con los participantes para que completen sus registros antes de iniciar el consenso.")

    #  Conflictos de Inter√©s
    st.markdown("###  Declaraci√≥n de Conflictos de Inter√©s")
    url_conflicto = "https://consenso-expertos-sfpqj688ihbl7m6tgrdmwb.streamlit.app/?registro=conflicto"
    st.code(url_conflicto)
    qr_conflicto = qrcode.make(url_conflicto)
    buf1 = io.BytesIO()
    qr_conflicto.save(buf1, format="PNG")
    img1 = base64.b64encode(buf1.getvalue()).decode()
    st.markdown(f'<img src="data:image/png;base64,{img1}" width="180">', unsafe_allow_html=True)

    # üìÑ Confidencialidad
    st.markdown("---")
    st.markdown("###  Compromiso de Confidencialidad")
    url_confid = "https://consenso-expertos-sfpqj688ihbl7m6tgrdmwb.streamlit.app/?registro=confidencialidad"
    st.code(url_confid)
    qr_confid = qrcode.make(url_confid)
    buf2 = io.BytesIO()
    qr_confid.save(buf2, format="PNG")
    img2 = base64.b64encode(buf2.getvalue()).decode()
    st.markdown(f'<img src="data:image/png;base64,{img2}" width="180">', unsafe_allow_html=True)

    # üì• Exportar datos recibidos
    st.markdown("---")
    st.subheader(" Exportar registros recibidos")

    col1, col2 = st.columns(2)

    if st.session_state["registro_conflicto"]:
        df1 = pd.DataFrame(st.session_state["registro_conflicto"])
        with col1:
            st.download_button("‚¨áÔ∏è Descargar Conflictos", df1.to_csv(index=False).encode(), file_name="conflictos.csv")
    else:
        with col1:
            st.info("Sin registros a√∫n.")

    if st.session_state["registro_confidencialidad"]:
        df2 = pd.DataFrame(st.session_state["registro_confidencialidad"])
        with col2:
            st.download_button("‚¨áÔ∏è Descargar Confidencialidad", df2.to_csv(index=False).encode(), file_name="confidencialidad.csv")
    else:
        with col2:
            st.info("Sin registros a√∫n.")

    # üóëÔ∏è Borrar registros (SOLO dentro del men√∫ Registro Previo)
    st.markdown("---")
    st.subheader("üóëÔ∏è Borrar registros")

    if st.button("‚ùå Borrar todos los registros de conflicto y confidencialidad"):
        st.session_state["registro_conflicto"] = []
        st.session_state["registro_confidencialidad"] = []

        try:
            os.remove(os.path.join(DATA_DIR, "registro_conflicto.csv"))
            os.remove(os.path.join(DATA_DIR, "registro_confidencialidad.csv"))
        except FileNotFoundError:
            pass

        st.success("Registros eliminados correctamente.")




# Cr√©ditos
st.sidebar.markdown("---")
st.sidebar.markdown("**ODDS Epidemiology**")
st.sidebar.markdown("v1.0.0 - 2025")
st.sidebar.markdown("¬© Todos los derechos reservados")
